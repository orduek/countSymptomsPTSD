##############################################################################
#									                                                           #
# 	 The Heterogeneity of Symptoms of Mental Disorders is Heavy-Tailed       #
#                                                                            #
#                         Or Duek & Tobias Spiller                           # 
#                                                                            #
#                       Code Version 0.4 (16.01.2021)                        #
#                                                                            #
#----------------------------------------------------------------------------#
#                                                                            #
#                           MBI: EFA / CFA                                   #
#									                                                           #
##############################################################################


###### Table of Contents #####################################################
# Script 3: EFA / CFA
#----- 1. Load libraries ----------------------------------------------------#
#----- 2. Import and prepare data -------------------------------------------#
#----- 3. Descriptive -------------------------------------------------------#
#----- 4. EFA  --------------------------------------------------------------#
#----- 5. CFA  --------------------------------------------------------------#
#-----  5.1 Define factor structure -----------------------------------------#
#-----  4.2 Function (data split + factor estimation) -----------------------#


###### 1. Load Libraries #####################################################
# Data handling + basic calculations
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")

#Factor Analysis
if(!require("lavaan")) install.packages("lavaan")
if(!require("psych")) install.packages("psych")
if(!require("GPArotation")) install.packages("GPArotation")

###### 2. Import and prepare data ############################################

# Prepare
# Create new data frame
datax<- read_delim("Generated Data/Matched_freq_count.csv", 
                   ";", escape_double = FALSE, trim_ws = TRUE)

###### 3. Descriptive ########################################################

summary(datax)

###### 4. EFA ################################################################
###### 4.1 Create Data Splits 
# Create splits
dataFREQ <- datax

Splits <- c()
freq_2080 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.2)
Splits[1] <- min(freq_2080$freq)

freq_5050 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.5)
Splits[2] <- min(freq_5050$freq)

freq_8020 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.8)
Splits[3] <- min(freq_8020$freq)


###### 4.2 EFA  ####################################################################
###### 4.2.1 20/80 Split  ##########################################################
# Define used sample
CUT = Splits[1] # frequency

# Prepare
datax_top <- filter(datax, freq > CUT)
datax_low <- filter(datax, freq <= CUT)

Share_top <- nrow(datax_top)/nrow(datax)

datax_top_cor <- cor(datax_top[,4:19])
datax_low_cor <- cor(datax_low[,4:19])

# Check assumptions
bar_top <- cortest.bartlett(datax_top_cor, n=nrow(datax_top))
bar_low <- cortest.bartlett(datax_low_cor, n=nrow(datax_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(datax_top_cor)
KMO_RES_low <- KMO(datax_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(datax_top_cor, fa = "fa", n.obs = nrow(datax_top))
EFA_low <- fa.parallel(datax_low_cor, fa = "fa", n.obs = nrow(datax_low))

# Estimate factor models
EFA_top_specific <- fa(datax_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(datax_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(datax_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(datax_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT1_t <- EFA_top_specific$loadings
CUT1_l <- EFA_low_specific$loadings


###### 4.2.2 Less than 5 endorsed ##################################################

# Define used sample
CUT = 5 # frequency

# Prepare
datax_top <- filter(datax, freq > CUT)
datax_low <- filter(datax, freq <= CUT)

Share_top <- nrow(datax_top)/nrow(datax)

datax_top_cor <- cor(datax_top[,4:19])
datax_low_cor <- cor(datax_low[,4:19])

# Check assumptions
bar_top <- cortest.bartlett(datax_top_cor, n=nrow(datax_top))
bar_low <- cortest.bartlett(datax_low_cor, n=nrow(datax_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(datax_top_cor)
KMO_RES_low <- KMO(datax_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(datax_top_cor, fa = "fa", n.obs = nrow(datax_top))
EFA_low <- fa.parallel(datax_low_cor, fa = "fa", n.obs = nrow(datax_low))

# Estimate factor models
EFA_top_specific <- fa(datax_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(datax_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(datax_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(datax_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT2_t <- EFA_top_specific$loadings
CUT2_l <- EFA_low_specific$loadings


###### 4.2.3 Only 1 endorsed  ##########################################################

# Define used sample
CUT = 1 # frequency

# Prepare
datax_top <- filter(datax, freq > CUT)
datax_low <- filter(datax, freq <= CUT)

Share_top <- nrow(datax_top)/nrow(datax)

datax_top_cor <- cor(datax_top[,4:19])
datax_low_cor <- cor(datax_low[,4:19])

# Check assumptions
bar_top <- cortest.bartlett(datax_top_cor, n=nrow(datax_top))
bar_low <- cortest.bartlett(datax_low_cor, n=nrow(datax_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(datax_top_cor)
KMO_RES_low <- KMO(datax_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(datax_top_cor, fa = "fa", n.obs = nrow(datax_top))
EFA_low <- fa.parallel(datax_low_cor, fa = "fa", n.obs = nrow(datax_low))

# Estimate factor models
EFA_top_specific <- fa(datax_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(datax_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(datax_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(datax_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT3_t <- EFA_top_specific$loadings
CUT3_l <- EFA_low_specific$loadings


###### 4.2.4 Full Data  ##########################################################

# Prepare
datax_top <- datax

datax_top_cor <- cor(datax_top[,4:19])

# Check assumptions
bar_top <- cortest.bartlett(datax_top_cor, n=nrow(datax_top))
bar_top

KMO_RES_top <- KMO(datax_top_cor)
KMO_RES_top 


# Estimate number of factors
EFA_top <- fa.parallel(datax_top_cor, fa = "fa", n.obs = nrow(datax_top))

# Estimate factor models
EFA_top_specific <- fa(datax_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(datax_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)

# Safe of EFA 
FULL <- EFA_top_specific$loadings


###### 4.2.5 All models  ##########################################################

print(CUT1_t, cutoff = 0.5) #2 factors
print(CUT1_l, cutoff = 0.5) #3-4 factors

print(CUT2_t, cutoff = 0.3) #2-3 factors
print(CUT2_l, cutoff = 0.3) #3-4 factors

print(CUT3_l, cutoff = 0.3) #random
print(CUT3_t, cutoff = 0.3) #3-4 Unlcear

print(FULL, cutoff = 0.3)   #3 factor model 

###### 4.3 Extracted factor models  #################################################

```{r}
model_CUT1_t<- ' A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6+mbi_8 +mbi_9+mbi_13+mbi_14+mbi_15
                 B =~ mbi_5+mbi_7+mbi_11+mbi_12+mbi_16'
# mbi_10 exclued

model_MBI_theory <- '  A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6
                   B =~ mbi_5+mbi_7+mbi_10+mbi_11+mbi_12+mbi_16
                   C =~ mbi_8+mbi_9+mbi_13+mbi_14+mbi_15'

model_MBI_1_factor <- '  A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6+ mbi_7+mbi_11+mbi_12+mbi_16+ mbi_13+mbi_14+mbi_15+ mbi_8+mbi_9'

```

###### 5. CFA  #####################################################################
###### 5.1 Extracted Model Top 20%  ################################################
```{r, include = FALSE}
model_Factor <- model_CUT1_t

iterateCFA <- function(data, n_itr, sample_size, freqCUT) {
  results_top = matrix(nrow = n_itr, ncol = 7)
  results_low = matrix(nrow = n_itr, ncol = 7)
  RES <- list()
  for (i in 1:n_itr) {
    dfSamp <- slice_sample(data, n = sample_size) 
    dataSAMP_top <- filter(dfSamp, freq > freqCUT)
    dataSAMP_low  <- filter(dfSamp, freq <= freqCUT)  
    factor_top <- cfa(model_Factor, data = dataSAMP_top[,4:19], estimator = "WLSMV")
    factor_low <- cfa(model_Factor, data = dataSAMP_low[,4:19], estimator = "WLSMV")
    results_top[i,1:6] <- fitMeasures(factor_top, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_low[i,1:6] <- fitMeasures(factor_low, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_top[i,7] <- nrow(dataSAMP_top) 
    results_low[i,7] <- nrow(dataSAMP_low) 
  }
  RES$results_top_df <- data.frame(chisq = results_top[,1], df = results_top[,2], pvalue = results_top[,3], 
                                   srmr = results_top[,4], cfi = results_top[,5], rmsea = results_top[,6], subsamplesize = results_top[,7])
  RES$results_low_df <- data.frame(chisq = results_low[,1], df = results_low[,2], pvalue = results_low[,3], 
                                   srmr = results_low[,4], cfi = results_low[,5], rmsea = results_low[,6], subsamplesize = results_low[,7])
  return(RES)
}
```
<br />
  Next we assess the effect of different sample sizes and the different splits.
<br />
  ```{r, include = FALSE}
size_top <- c()
size_low <- c()
size_top_sd <- c()
size_low_sd <- c()

CFI_TOP <- c()
CFI_sd_TOP <- c()
CFI_LOW <- c()
CFI_sd_LOW <- c()

rmsea_TOP <- c()
rmsea_sd_TOP <- c()
rmsea_LOW <- c()
rmsea_sd_LOW <- c()

p_TOP <- c()
p_sd_TOP <- c()
p_LOW <- c()
p_sd_LOW <- c()

srmr_TOP <- c()
srmr_sd_TOP <- c()
srmr_LOW <- c()
srmr_sd_LOW <- c()

FinRES <- list()
```

```{r, include = FALSE}
datax <- dataFREQ <- datax

Splits <- c()
freq_2080 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.2)
Splits[1] <- min(freq_2080$freq)

freq_5050 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.5)
Splits[2] <- min(freq_5050$freq)

freq_8020 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.8)
Splits[3] <- min(freq_8020$freq)
```
<br />
  Here we define the different sample sizes we want to test and the number of iterations for each sample size.
<br />
  ```{r}
size_n <- c(2000, 5000)
nitr <- 50

```

```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = Splits[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_2080 <- dx
```

<br />
  Next median split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 5, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_Median <- dx
```

<br />
  Next 80/20 split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 1, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_8020 <- dx
```







###### 5.2 MBI 3 factor Model ################################################
```{r, include = FALSE}
model_Factor <- model_MBI_theory

iterateCFA <- function(data, n_itr, sample_size, freqCUT) {
  results_top = matrix(nrow = n_itr, ncol = 7)
  results_low = matrix(nrow = n_itr, ncol = 7)
  RES <- list()
  for (i in 1:n_itr) {
    dfSamp <- slice_sample(data, n = sample_size) 
    dataSAMP_top <- filter(dfSamp, freq > freqCUT)
    dataSAMP_low  <- filter(dfSamp, freq <= freqCUT)  
    factor_top <- cfa(model_Factor, data = dataSAMP_top[,4:19], estimator = "WLSMV")
    factor_low <- cfa(model_Factor, data = dataSAMP_low[,4:19], estimator = "WLSMV")
    results_top[i,1:6] <- fitMeasures(factor_top, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_low[i,1:6] <- fitMeasures(factor_low, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_top[i,7] <- nrow(dataSAMP_top) 
    results_low[i,7] <- nrow(dataSAMP_low) 
  }
  RES$results_top_df <- data.frame(chisq = results_top[,1], df = results_top[,2], pvalue = results_top[,3], 
                                   srmr = results_top[,4], cfi = results_top[,5], rmsea = results_top[,6], subsamplesize = results_top[,7])
  RES$results_low_df <- data.frame(chisq = results_low[,1], df = results_low[,2], pvalue = results_low[,3], 
                                   srmr = results_low[,4], cfi = results_low[,5], rmsea = results_low[,6], subsamplesize = results_low[,7])
  return(RES)
}
```
<br />
  Next we assess the effect of different sample sizes and the different splits.
<br />
  ```{r, include = FALSE}
size_top <- c()
size_low <- c()
size_top_sd <- c()
size_low_sd <- c()

CFI_TOP <- c()
CFI_sd_TOP <- c()
CFI_LOW <- c()
CFI_sd_LOW <- c()

rmsea_TOP <- c()
rmsea_sd_TOP <- c()
rmsea_LOW <- c()
rmsea_sd_LOW <- c()

p_TOP <- c()
p_sd_TOP <- c()
p_LOW <- c()
p_sd_LOW <- c()

srmr_TOP <- c()
srmr_sd_TOP <- c()
srmr_LOW <- c()
srmr_sd_LOW <- c()

FinRES <- list()
```

```{r, include = FALSE}
datax <- dataFREQ <- datax

Splits <- c()
freq_2080 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.2)
Splits[1] <- min(freq_2080$freq)

freq_5050 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.5)
Splits[2] <- min(freq_5050$freq)

freq_8020 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.8)
1 <- min(freq_8020$freq)
```
<br />
  Here we define the different sample sizes we want to test and the number of iterations for each sample size.
<br />
  ```{r}
size_n <- c(2000, 5000)
nitr <- 50

```

```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = Splits[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_2080 <- dx
```
<br />
  Next median split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 5, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_Median <- dx
```

```
<br />
  Next 80/20 split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 1, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_8020 <- dx
```




###### 5.3 MBI 1 factor Model ################################################
```{r, include = FALSE}
model_Factor <- model_MBI_1_factor

iterateCFA <- function(data, n_itr, sample_size, freqCUT) {
  results_top = matrix(nrow = n_itr, ncol = 7)
  results_low = matrix(nrow = n_itr, ncol = 7)
  RES <- list()
  for (i in 1:n_itr) {
    dfSamp <- slice_sample(data, n = sample_size) 
    dataSAMP_top <- filter(dfSamp, freq > freqCUT)
    dataSAMP_low  <- filter(dfSamp, freq <= freqCUT)  
    factor_top <- cfa(model_Factor, data = dataSAMP_top[,4:19], estimator = "WLSMV")
    factor_low <- cfa(model_Factor, data = dataSAMP_low[,4:19], estimator = "WLSMV")
    results_top[i,1:6] <- fitMeasures(factor_top, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_low[i,1:6] <- fitMeasures(factor_low, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_top[i,7] <- nrow(dataSAMP_top) 
    results_low[i,7] <- nrow(dataSAMP_low) 
  }
  RES$results_top_df <- data.frame(chisq = results_top[,1], df = results_top[,2], pvalue = results_top[,3], 
                                   srmr = results_top[,4], cfi = results_top[,5], rmsea = results_top[,6], subsamplesize = results_top[,7])
  RES$results_low_df <- data.frame(chisq = results_low[,1], df = results_low[,2], pvalue = results_low[,3], 
                                   srmr = results_low[,4], cfi = results_low[,5], rmsea = results_low[,6], subsamplesize = results_low[,7])
  return(RES)
}
```
<br />
  Next we assess the effect of different sample sizes and the different splits.
<br />
  ```{r, include = FALSE}
size_top <- c()
size_low <- c()
size_top_sd <- c()
size_low_sd <- c()

CFI_TOP <- c()
CFI_sd_TOP <- c()
CFI_LOW <- c()
CFI_sd_LOW <- c()

rmsea_TOP <- c()
rmsea_sd_TOP <- c()
rmsea_LOW <- c()
rmsea_sd_LOW <- c()

p_TOP <- c()
p_sd_TOP <- c()
p_LOW <- c()
p_sd_LOW <- c()

srmr_TOP <- c()
srmr_sd_TOP <- c()
srmr_LOW <- c()
srmr_sd_LOW <- c()

FinRES <- list()
```

```{r, include = FALSE}
datax <- dataFREQ <- datax

Splits <- c()
freq_2080 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.2)
Splits[1] <- min(freq_2080$freq)

freq_5050 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.5)
Splits[2] <- min(freq_5050$freq)

freq_8020 <- dataFREQ %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.8)
Splits[3] <- min(freq_8020$freq)
```
<br />
  Here we define the different sample sizes we want to test and the number of iterations for each sample size.
<br />
  ```{r}
size_n <- c(2000, 5000)
nitr <- 50

```

```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = Splits[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1fact_2080 <- dx
```

<br />
  Next median split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 5, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1fact_Median <- dx
```

<br />
  Next 80/20 split.
<br />
  ```{r, include = FALSE}
for (i in 1:length(size_n)){
  test <- iterateCFA(datax, n_itr = nitr, freqCUT = 1, sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1fact_8020 <- dx
```

###### 5.4 Factor Model Results ################################################
Res_1CUT_2080
Res_1CUT_Median
Res_1CUT_8020

Res_Theory_2080
Res_Theory_Median
Res_Theory_8020

Res_1fact_2080
Res_1fact_Median
Res_1fact_8020

###### 5.4.1 Q1 ################################################
# Does the factor model derived in the top 20% fit in the remaining population? -> "ok"
Res_1CUT_2080[4,] #CFI 0.94, #RMSEA 0.08

###### 5.4.2 Q2 ################################################
# Does the factor model derived in the top 20% fit in the less than 5 -> "marginal"
Res_1CUT_Median[4,] #CFI 0.86 #RMSEA 0.07 #SRMR 0.07

# Does the factor model derived in the top 20% fit in the only 1 -> "marginal"
Res_1CUT_8020[4,] #CFI 0.77 #RMSEA 0.06 #SRMR 0.07

###### 5.4.3 Q3 ################################################
# Does the theory derived factor model fit in the top and less than 5 -> ok
Res_Theory_2080[2,] #CFI 0.99 #RMSEA 0.02 #SRMR 0.04
Res_Theory_Median[4,] #CFI 0.92 #RMSEA 0.05 #SRMR 0.05

# Does the theory derived factor model fit in the top and only 1 -> ok
Res_Theory_2080[2,] #CFI 0.99 #RMSEA 0.02 #SRMR 0.03
Res_Theory_8020[4,] #CFI 0.90 #RMSEA 0.04 #SRMR 0.05




