##############################################################################
#									                                                           #
# 	 The Heterogeneity of Symptoms of Mental Disorders is Heavy-Tailed       #
#                                                                            #
#                         Or Duek & Tobias Spiller                           # 
#                                                                            #
#                       Code Version 1.0 (15.02.2021)                        #
#                                                                            #
#----------------------------------------------------------------------------#
#                                                                            #
#                             Full Cycle EFA / CFA                           #
#									                                                           #
##############################################################################


###### Table of Contents #####################################################
#----- 1. Load libraries ----------------------------------------------------#
#----- 2. Import and prepare data -------------------------------------------#
#----- 3. Descriptive -------------------------------------------------------#
#----- 4. EFA  --------------------------------------------------------------#
#----- 5. CFA  --------------------------------------------------------------#
#-----  5.1 Define factor structure -----------------------------------------#
#-----  5.2 Function (data split + factor estimation) -----------------------#

## General Notes ##
# datax = dataframe script one with scores, binarized items and frequency profiles
# data_train = 75% of datax
# data_test = 25% of datax
# datay_train = dataframe of items with ordinal ratings AND frequency of symptom profiles (redcued data_train)
# dataz_train = dataframe of items with ordinal ratings WITHOUT frequency of symptom profiles (redcued data_train)

###### 1. Load Libraries #####################################################
# Data handling + basic calculations
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("rsample")) install.packages("rsample")
if(!require("readxl")) install.packages("readxl")

#Factor Analysis
if(!require("lavaan")) install.packages("lavaan")
if(!require("psych")) install.packages("psych")
if(!require("GPArotation")) install.packages("GPArotation")

###### 2. Import and prepare data ############################################

###### 2.1 Import
# Create new data frame
datax <- read_delim("Generated Data/Matched_freq_count.csv", 
                    ";", escape_double = FALSE, trim_ws = TRUE)

###### 2.2 Training and testing data
splits <- initial_split(datax, strata = freq) #25/75%

data_train <- training(splits)
data_test  <- testing(splits)

# Create Splits based on % of sample
Splits_percentage <- c()

freq_2080 <- data_train %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.2)
Splits_percentage[1] <- min(freq_2080$freq)

freq_5050 <- data_train %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.5)
Splits_percentage[2] <- min(freq_5050$freq)

freq_8020 <- data_train %>% 
  arrange(freq) %>% 
  slice_tail(prop = 0.8)
Splits_percentage[3] <- min(freq_8020$freq)

# Create Splits based on frequency
Splits_frequency <- c()
Splits_frequency[1] <- 5
Splits_frequency[2] <- 2
Splits_frequency[3] <- 1

Splits_percentage
Splits_frequency

# Prepare dataset for further analysis
datay_train <- data_train %>% 
  select(mbi_1:mbi_16, freq)

dataz_train <- datay_train %>% 
  select(- freq)

###### 3. Descriptive ########################################################

summary(datax)
summary(data_train)
summary(data_test)

###### 4. EFA ################################################################
###### 4.2 EFA  ####################################################################
###### 4.2.1 Freq= 5  ##########################################################
# Define used sample
CUT = Splits_frequency[1]

# Prepare
data_top <- datay_train %>% 
  filter(freq > CUT) %>% 
  select(-freq)

data_low <- datay_train %>% 
  filter(freq <= CUT) %>% 
  select(-freq)

Share_top <- nrow(data_top)/nrow(datay_train)

data_top_cor <- cor(data_top)
data_low_cor <- cor(data_low)

# Check assumptions
bar_top <- cortest.bartlett(data_top_cor, n=nrow(data_top))
bar_low <- cortest.bartlett(data_low_cor, n=nrow(data_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(data_top_cor)
KMO_RES_low <- KMO(data_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(data_top_cor, fa = "fa", n.obs = nrow(data_top))
EFA_low <- fa.parallel(data_low_cor, fa = "fa", n.obs = nrow(data_low))

# Estimate factor models
EFA_top_specific <- fa(data_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(data_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(data_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(data_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT1_t <- EFA_top_specific$loadings
CUT1_l <- EFA_low_specific$loadings


###### 4.2.2 Freq= 2  ##########################################################

# Define used sample
CUT = Splits_frequency[2]

# Prepare
data_top <- datay_train %>% 
  filter(freq > CUT) %>% 
  select(-freq)

data_low <- datay_train %>% 
  filter(freq <= CUT) %>% 
  select(-freq)

Share_top <- nrow(data_top)/nrow(datay_train)

data_top_cor <- cor(data_top)
data_low_cor <- cor(data_low)

# Check assumptions
bar_top <- cortest.bartlett(data_top_cor, n=nrow(data_top))
bar_low <- cortest.bartlett(data_low_cor, n=nrow(data_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(data_top_cor)
KMO_RES_low <- KMO(data_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(data_top_cor, fa = "fa", n.obs = nrow(data_top))
EFA_low <- fa.parallel(data_low_cor, fa = "fa", n.obs = nrow(data_low))

# Estimate factor models
EFA_top_specific <- fa(data_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(data_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(data_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(data_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT2_t <- EFA_top_specific$loadings
CUT2_l <- EFA_low_specific$loadings

###### 4.2.3 Freq= 1  ##########################################################
# Define used sample
CUT = Splits_frequency[3]

# Prepare
data_top <- datay_train %>% 
  filter(freq > CUT) %>% 
  select(-freq)

data_low <- datay_train %>% 
  filter(freq <= CUT) %>% 
  select(-freq)

Share_top <- nrow(data_top)/nrow(datay_train)

data_top_cor <- cor(data_top)
data_low_cor <- cor(data_low)

# Check assumptions
bar_top <- cortest.bartlett(data_top_cor, n=nrow(data_top))
bar_low <- cortest.bartlett(data_low_cor, n=nrow(data_low))
bar_top$p.value
bar_low

KMO_RES_top <- KMO(data_top_cor)
KMO_RES_low <- KMO(data_low_cor)
KMO_RES_top 
KMO_RES_low

# Estimate number of factors
EFA_top <- fa.parallel(data_top_cor, fa = "fa", n.obs = nrow(data_top))
EFA_low <- fa.parallel(data_low_cor, fa = "fa", n.obs = nrow(data_low))

# Estimate factor models
EFA_top_specific <- fa(data_top_cor, 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(data_top),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

EFA_low_specific <- fa(data_low_cor, 
                       nfactors=EFA_low$nfact,
                       n.obs = nrow(data_low),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)
print(EFA_low_specific$loadings, cutoff = 0.3)

# Safe of EFA 
CUT3_t <- EFA_top_specific$loadings
CUT3_l <- EFA_low_specific$loadings



###### 4.2.4 Full Data  ##########################################################

# Prepare
data_full <- datay_train %>% 
  select(-freq)

data_full_cor <- cor(data_full)

# Check assumptions
bar_top <- cortest.bartlett(data_full_cor , n=nrow(data_full))
bar_top

KMO_RES_top <- KMO(data_full_cor )
KMO_RES_top 


# Estimate number of factors
EFA_top <- fa.parallel(data_full_cor , fa = "fa", n.obs = nrow(data_full))

# Estimate factor models
EFA_top_specific <- fa(data_full_cor , 
                       nfactors=EFA_top$nfact,
                       n.obs = nrow(data_full),
                       SMC=TRUE,
                       fm = "ml",
                       rotate="promax",
                       max.iter=1000)

# Results of EFA 
print(EFA_top_specific$loadings, cutoff = 0.3)

# Safe of EFA 
FULL <- EFA_top_specific$loadings


###### 4.2.5 All models  ##########################################################

print(CUT1_t, cutoff = 0.3) #3-4 factors
print(CUT1_l, cutoff = 0.3) #3-4 factors

print(CUT2_t, cutoff = 0.3) #3-4 factors
print(CUT2_l, cutoff = 0.3) #3-4 factors

print(CUT3_t, cutoff = 0.5) #3-4 factors
print(CUT3_l, cutoff = 0.5) #random

print(FULL, cutoff = 0.2)   #3-4 factor model 

###### 4.3 Extracted factor models  #################################################

model_CUT1_t<- ' A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6+mbi_8 +mbi_9+mbi_13+mbi_14+mbi_15
                 B =~ mbi_5+mbi_7+mbi_11+mbi_12+mbi_16'
# mbi_10 exclued

model_FULL<- ' A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6
               B =~ mbi_5+mbi_7+mbi_11+mbi_12+mbi_16
               C =~ mbi_13+mbi_14+mbi_15
               D =~ mbi_8 +mbi_9'
# mbi_10 exclued


model_MBI_theory <- '  A =~ mbi_1+mbi_2+mbi_3+mbi_4+mbi_6
                   B =~ mbi_5+mbi_7+mbi_10+mbi_11+mbi_12+mbi_16
                   C =~ mbi_8+mbi_9+mbi_13+mbi_14+mbi_15'


###### 5. CFA  #####################################################################

# Simulation conditions
size_n <- c(1000, 1500, 2000, 5000)
nitr <- 5

# IterateCFA function
iterateCFA <- function(data, n_itr, sample_size, freqCUT) {
  results_top = matrix(nrow = n_itr, ncol = 7)
  results_low = matrix(nrow = n_itr, ncol = 7)
  RES <- list()
  FinRES <- list()
  for (i in 1:n_itr) {
    dfSamp <- slice_sample(data, n = sample_size) 
    dataSAMP_top <- filter(dfSamp, freq > freqCUT)
    dataSAMP_low  <- filter(dfSamp, freq <= freqCUT)  
    factor_top <- cfa(model_Factor, data = dataSAMP_top, estimator = "WLSMV")
    factor_low <- cfa(model_Factor, data = dataSAMP_low, estimator = "WLSMV")
    results_top[i,1:6] <- fitMeasures(factor_top, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_low[i,1:6] <- fitMeasures(factor_low, c("chisq","df","pvalue","srmr","cfi","rmsea"))
    results_top[i,7] <- nrow(dataSAMP_top) 
    results_low[i,7] <- nrow(dataSAMP_low) 
  }
  RES$results_top_df <- data.frame(chisq = results_top[,1], df = results_top[,2], pvalue = results_top[,3], 
                                   srmr = results_top[,4], cfi = results_top[,5], rmsea = results_top[,6], subsamplesize = results_top[,7])
  RES$results_low_df <- data.frame(chisq = results_low[,1], df = results_low[,2], pvalue = results_low[,3], 
                                   srmr = results_low[,4], cfi = results_low[,5], rmsea = results_low[,6], subsamplesize = results_low[,7])
  return(RES)
}

size_top <- c()
size_low <- c()
size_top_sd <- c()
size_low_sd <- c()

CFI_TOP <- c()
CFI_sd_TOP <- c()
CFI_LOW <- c()
CFI_sd_LOW <- c()

rmsea_TOP <- c()
rmsea_sd_TOP <- c()
rmsea_LOW <- c()
rmsea_sd_LOW <- c()

p_TOP <- c()
p_sd_TOP <- c()
p_LOW <- c()
p_sd_LOW <- c()

srmr_TOP <- c()
srmr_sd_TOP <- c()
srmr_LOW <- c()
srmr_sd_LOW <- c()

###### 5.1 Extracted Model Top 20%  ################################################
model_Factor <- model_CUT1_t

###### 5.1.1 Freq= 5 ################################################
for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_2080 <- dx

###### 5.1.2 Freq= 2 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[2], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_Median <- dx

###### 5.1.3 Freq= 1 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[3], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_1CUT_8020 <- dx


###### 5.2 MBI 3 factor Model ################################################
model_Factor <- model_MBI_theory

###### 5.2.1 Freq= 5 ################################################
for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_2080 <- dx

###### 5.2.2 Freq= 2 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[2], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_Median <- dx

###### 5.2.3 Freq= 1 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[3], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_Theory_8020 <- dx






###### 5.3 MBI 3 factor Model ################################################
model_Factor <- model_FULL

###### 5.3.1 Freq= 5 ################################################
for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[1], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_FULL_2080 <- dx

###### 5.3.2 Freq= 2 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[2], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_FULL_Median <- dx

###### 5.3.3 Freq= 1 ################################################

for (i in 1:length(size_n)){
  test <- iterateCFA(data_test, n_itr = nitr, freqCUT = Splits_frequency[3], sample_size = size_n[i])
  
  size_top[i] <- median(test$results_top_df$subsamplesize)
  size_top_sd[i] <- sd(test$results_top_df$subsamplesize)
  size_low[i] <- median(test$results_low_df$subsamplesize)
  size_low_sd[i] <- sd(test$results_low_df$subsamplesize)
  
  CFI_TOP[i] <- median(test$results_top_df$cfi)
  CFI_sd_TOP[i] <- sd(test$results_top_df$cfi)
  CFI_LOW[i] <- median(test$results_low_df$cfi)
  CFI_sd_LOW [i] <- sd(test$results_low_df$cfi)
  
  rmsea_TOP[i] <- median(test$results_top_df$rmsea)
  rmsea_sd_TOP[i] <- sd(test$results_top_df$rmsea)
  rmsea_LOW[i] <- median(test$results_low_df$rmsea)
  rmsea_sd_LOW[i] <- sd(test$results_low_df$rmsea)
  
  p_TOP[i] <- median(test$results_top_df$p)
  p_sd_TOP[i] <- sd(test$results_top_df$p)
  p_LOW[i] <- median(test$results_low_df$p)
  p_sd_LOW[i] <- sd(test$results_low_df$p)
  
  srmr_TOP[i] <- median(test$results_top_df$srmr)
  srmr_sd_TOP[i] <- sd(test$results_top_df$srmr)
  srmr_LOW[i] <- median(test$results_low_df$srmr)
  srmr_sd_LOW[i] <- sd(test$results_low_df$srmr)
}   
d_top <- data.frame(size_n, size_top, size_top_sd,
                    CFI_TOP, CFI_sd_TOP,
                    rmsea_TOP,rmsea_sd_TOP,
                    p_TOP, p_sd_TOP,
                    srmr_TOP,srmr_sd_TOP)

d_low <- data.frame(size_n, size_low, size_low_sd,
                    CFI_LOW, CFI_sd_LOW,
                    rmsea_LOW, rmsea_sd_LOW, 
                    p_LOW, p_sd_LOW, 
                    srmr_LOW, srmr_sd_LOW)

d_top$group <- c("top")
d_low$group <- c("low ")
colnames(d_low) <- colnames(d_top)
dx <- rbind(d_top, d_low)

Res_FULL_8020 <- dx







###### 5.4 Factor Model Results ################################################
Res_1CUT_2080
Res_1CUT_Median
Res_1CUT_8020

Res_Theory_2080
Res_Theory_Median
Res_Theory_8020

Res_FULL_2080
Res_FULL_Median
Res_FULL_8020

###### 5.4.1 Q1 ################################################
# Does the factor model derived in the top 20% fit in the remaining population? -> "ok"
Res_1CUT_2080[8,] #CFI 0.94, #RMSEA 0.08

###### 5.4.2 Q2 ################################################
# Does the factor model derived in the top 20% fit in the lowest 20% -> "marginal"
Res_1CUT_8020[8,] #CFI 0.80 #RMSEA 0.07 #SRMR 0.07

###### 5.4.3 Q3 ################################################
# Does the theory derived factor model fit in the top and low 20% -> yes
Res_Theory_2080[4,] #CFI 0.99 #RMSEA 0.02 #SRMR 0.03
Res_Theory_8020[8,] #CFI 0.92 #RMSEA 0.04 #SRMR 0.05




